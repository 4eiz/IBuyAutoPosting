import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from keyboards.client import Menu_callback, update_account_method, cancel_upl, k_menu
from data import chats, users
from main import bot

class Acc(StatesGroup):
    session = State()
    chats = State()



router = Router()


text = '''<b>
–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:
</b>'''

@router.callback_query(Menu_callback.filter(F.menu == 'upl_acc'))
async def file(call: CallbackQuery, callback_data: Menu_callback, state: FSMContext):
    await state.set_state(Acc.session)
    await call.message.edit_text(text, reply_markup=update_account_method())





text_answer = '''
<b>–í–Ω–∏–º–∞–Ω–∏–µ!
–í–∞—à —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤!

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª .session:</b>
'''



@router.callback_query(Menu_callback.filter(F.menu == 'upl_acc_method'))
async def file(call: CallbackQuery, callback_data: Menu_callback, state: FSMContext):
    await state.set_state(Acc.session)
    await call.message.edit_text(text_answer, reply_markup=cancel_upl())


@router.message(Acc.session)
async def upload_account(message: Message, state: FSMContext):

    user_id = message.from_user.id

    file_id = message.document.file_id

    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    file_data = await bot.download_file(file_path)

    destination_folder = os.path.abspath(f'app/posting/{str(user_id)}')

    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)


    new_file_id = await chats.maxID()+1


    filename = f"{user_id}_{new_file_id}.session"
    destination_path_to_save = os.path.join(destination_folder, filename)

    with open(destination_path_to_save, 'wb') as destination_file:
        destination_file.write(file_data.read())
    
    record = await users.user_profile(user_id)
    amount = record[2] + 1

    await users.update_accounts(user_id, amount)

    await message.answer('<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ —á–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt</b>', parse_mode='HTML', reply_markup=cancel_upl())

    await state.update_data(filename=filename, max_id=new_file_id)
    await state.set_state(Acc.chats)



@router.message(Acc.chats)
async def process_links_file(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Å—ã–ª–∫–∏.")
        return

    file_id = message.document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path

    file_data = await bot.download_file(file_path)


    links_data = file_data.read().decode('utf-8')
    links_list = links_data.splitlines()

    user_data = await state.get_data()
    filename = user_data.get('filename')

    max_id = user_data.get('max_id')

    amount = len(links_list)

    record = await users.user_profile(user_id)
    amount += record[3] 


    await users.update_chats(user_id, amount)

    await chats.add_account(max_id, user_id, filename, links_list)

    await message.answer("<b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.</b>")

    await message.answer(f'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n'
                         '–í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=k_menu())

    await state.clear()



#----------------------------------
    




